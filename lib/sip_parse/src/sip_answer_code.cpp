#include <iostream>
#include <string>

using namespace std;
#include "host_addr.h"
#include "sip_answer_code.h"
#include "skytool.h"
#include "debug.h"
#include "sip_tool.h"

#include "sip_answer_code.h"

sip_answer_code_t sipAnswerCode[ANSWER_CODE_NUM]=
{
    // provisional 1xx     : 5
    {PRO_TRYING_NUM,PRO_TRYING_STR},
    {PRO_RINGING_NUM,PRO_RINGING_STR},
    {PRO_CALL_IS_BEING_FORWARDED_NUM,PRO_CALL_IS_BEING_FORWARDED_STR},
    {PRO_QUEUED_NUM,PRO_QUEUED_STR},
    {PRO_SESSION_PROGRESS_NUM,PRO_SESSION_PROGRESS_STR},
    // successful 2xx      : 1
    {SUC_OK_NUM,SUC_OK_STR},
    // redirection 3xx     : 5
    {RED_MULTIPLE_CHOICES_NUM,RED_MULTIPLE_CHOICES_STR},
    {RED_MOVED_PERMANENTLY_NUM,RED_MOVED_PERMANENTLY_STR},
    {RED_MOVED_TEMPORARY_NUM,RED_MOVED_TEMPORARY_STR},
    {RED_USE_PROXY_NUM,RED_USE_PROXY_STR},
    {RED_ALTERNATIVE_SERVICE_NUM,RED_ALTERNATIVE_SERVICE_STR},
    // request failure 4xx : 28
    {FAIL_BAD_REQUEST_NUM,FAIL_BAD_REQUEST_STR},
    {FAIL_UNAUTHORIZED_NUM,FAIL_UNAUTHORIZED_STR},
    {FAIL_PAYMENT_REQUIRED_NUM,FAIL_PAYMENT_REQUIRED_STR},
    {FAIL_FORBIDDEN_NUM,FAIL_FORBIDDEN_STR},
    {FAIL_NOT_FOUND_NUM,FAIL_NOT_FOUND_STR},
    {FAIL_METHOD_NOT_ALLOWED_NUM, FAIL_METHOD_NOT_ALLOWED_STR},
    {FAIL_NOT_ACCEPTABLE_NUM, FAIL_NOT_ACCEPTABLE_STR},
    {FAIL_PROXY_AUTHENTICATION_REQUIRED_NUM, FAIL_PROXY_AUTHENTICATION_REQUIRED_STR},
    {FAIL_REQUEST_TIMEOUT_NUM, FAIL_REQUEST_TIMEOUT_STR},
    {FAIL_GONE_NUM, FAIL_GONE_STR},
    {FAIL_REQUEST_ENTITY_TOO_LARGE_NUM, FAIL_REQUEST_ENTITY_TOO_LARGE_STR},
    {FAIL_REQUEST_URI_TOO_LONG_NUM, FAIL_REQUEST_URI_TOO_LONG_STR},
    {FAIL_UNSUPPORTED_MEDIA_TYPE_NUM, FAIL_UNSUPPORTED_MEDIA_TYPE_STR},
    {FAIL_UNSUPPORTED_URI_SCHEME_NUM, FAIL_UNSUPPORTED_URI_SCHEME_STR},
    {FAIL_BAD_EXTENSION_NUM, FAIL_BAD_EXTENSION_STR},
    {FAIL_EXTENSION_REQUIRED_NUM, FAIL_EXTENSION_REQUIRED_STR},
    {FAIL_INTERVAL_TOO_BRIEF_NUM, FAIL_INTERVAL_TOO_BRIEF_STR},
    {FAIL_TEMPORARILY_UNAVAILABLE_NUM, FAIL_TEMPORARILY_UNAVAILABLE_STR},
    {FAIL_CALL_TRANSACTION_DOES_NOT_EXIST_NUM, FAIL_CALL_TRANSACTION_DOES_NOT_EXIST_STR},
    {FAIL_LOOP_DETECTED_NUM, FAIL_LOOP_DETECTED_STR},
    {FAIL_TOO_MANY_HOPS_NUM, FAIL_TOO_MANY_HOPS_STR},
    {FAIL_ADDRESS_INCOMPLETE_NUM, FAIL_ADDRESS_INCOMPLETE_STR},
    {FAIL_AMBIGUOUS_NUM, FAIL_AMBIGUOUS_STR},
    {FAIL_BUSY_HERE_NUM, FAIL_BUSY_HERE_STR},
    {FAIL_REQUEST_TERMINATED_NUM, FAIL_REQUEST_TERMINATED_STR},
    {FAIL_NOT_ACCEPTABLE_HERE_NUM, FAIL_NOT_ACCEPTABLE_HERE_STR},
    {FAIL_REQUEST_PENDING_NUM, FAIL_REQUEST_PENDING_STR},
    {FAIL_UNDECIPHERABLE_NUM, FAIL_UNDECIPHERABLE_STR},
    // server failure 5xx  : 7
    {FAIL_SERVER_INTERNAL_ERROR_NUM, FAIL_SERVER_INTERNAL_ERROR_STR},
    {FAIL_NOT_IMPLEMENTED_NUM,FAIL_NOT_IMPLEMENTED_STR},
    {FAIL_BAD_GATEWAY_NUM,FAIL_BAD_GATEWAY_STR},
    {FAIL_SERVICE_UNAVAILABLE_NUM,FAIL_SERVICE_UNAVAILABLE_STR},
    {FAIL_SERVER_TIME_OUT_NUM,FAIL_SERVER_TIME_OUT_STR},
    {FAIL_VERSION_NOT_SUPPORTED_NUM,FAIL_VERSION_NOT_SUPPORTED_STR},
    {FAIL_MESSAGE_TOO_LARGE_NUM,FAIL_MESSAGE_TOO_LARGE_STR},
// global failurs 6xx  : 4
    {GFAIL_BUSY_EVERYWHERE_NUM,GFAIL_BUSY_EVERYWHERE_STR},
    {GFAIL_DECLINE_NUM,GFAIL_DECLINE_STR},
    {GFAIL_DOES_NOT_EXIST_ANYWHERE_NUM,GFAIL_DOES_NOT_EXIST_ANYWHERE_STR},
    {GFAIL_NOT_ACCEPTABLE_NUM,GFAIL_NOT_ACCEPTABLE_STR}
};

static int get_sip_answer_code_str_internal(int code, char *buf)
{
    int i = 0;
    for( i = 0;i < ANSWER_CODE_NUM;i++)
    {
        if( sipAnswerCode[i].code == code )
        {
#ifdef LINUX
            bzero( buf, sizeof(buf));
#endif
            sprintf(buf, "%s", sipAnswerCode[i].str);
            return 1;
        }
    }
    return 0;
}

int get_sip_answer_code_str(int code, char *buf)
{
    return get_sip_answer_code_str_internal(code, buf);
}